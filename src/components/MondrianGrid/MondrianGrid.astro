---
/**
 * Requirements for module:
 *
 * MVP:
 * - Should generate a Piet Mondrian style grid layout
 *  - Cells should have randomized size, shape, and colors
 *  - The base cell unit should always be square.
 *  - The base cell size should have a minimum but be flexible to expand to fill the width of the grid container.
 * - Should always fill the grid fully with cells (no gaps). Cells shouldnot overflow the grid, but the grid height can expand to accomodate all the cells.
 * - Should respond to window resize events (both width and/or height changes)
 *
 *
 * Stretch:
 * - Should be able to specify a specific number of large squares
 *
 *
 * TODO:
 *
 * Add horizontal bars too (and varying sizes)
 * maybe have a first pass to subdivide the total grid area into several other uneven grids, and then use different proprtions for each subarray to have more variety visually.
 * Clean it up tons :)
 */

const { links } = Astro.props;
---

<div class="mondrian" data-project-links={JSON.stringify(links)}></div>
<template id="mondrian-cell-template">
  <div class="mondrian-cell"></div>
</template>
<style is:global>
  .mondrian {
    display: grid;
    /* Setting a min height can solve the unfilled grid issue and create a really cool header effect */
    grid-template-columns: repeat(
      var(--cell-count-width),
      minmax(var(--cell-width), 1fr)
    );
    grid-template-rows: repeat(
      var(--cell-count-height),
      minmax(var(--cell-width), 1fr)
    );
    grid-auto-flow: row dense;
    width: 100%;
    max-width: 100%;
    height: 100%;
    min-height: 100%;
    position: relative;
    border: var(--border-width) solid black;
    background: black;
  }
  .mondrian-cell {
    background-color: var(--background-color);
    position: relative;
    width: 100%;
    height: 100%;
    grid-column-end: span var(--span-width);
    grid-row-end: span var(--span-height);

    a {
      overflow: hidden;
      background-color: black;
      div {
        /* box-shadow: inset 0 0 3px 5px white; */
        transition: transform 250ms ease-in-out;
        backface-visibility: hidden;
        transform-origin: left;
        background-color: white;
      }

      :where(&:focus, &:hover) {
        box-shadow: inset 0 0 1px 10px black;
        background-color: black;
        > div {
          box-shadow: inset 0 0 0 2px white;
          transform: perspective(1em) rotateY(5deg);
        }
      }
    }
  }

  /* .blink {
    animation: blink 2s;
  } */

  @keyframes blink {
    0% {
      /* filter: saturate(1); */
    }

    20% {
    }

    50% {
      filter: saturate(10);
      /* transform: scale(2); */
    }

    80% {
    }

    100% {
      /* filter: saturate(1); */
    }
  }
</style>

<script>
  import { mutateShuffle } from "../../utils/array";
  import { themes } from "./gridThemes";

  const theme = themes.get("synthwave")!;

  const shapeDimensions = {
    default: {
      cellCount: 1,
      width: 1,
      height: 1,
    },
    small_square: {
      cellCount: 4,
      width: 2,
      height: 2,
    },
    medium_square: {
      cellCount: 9,
      width: 3,
      height: 3,
    },
    large_square: {
      cellCount: 25,
      width: 5,
      height: 5,
    },
    small_rect: {
      cellCount: 2,
      width: 1,
      height: 2,
    },
    medium_rect: {
      cellCount: 4,
      width: 1,
      height: 4,
    },
    large_rect: {
      cellCount: 6,
      width: 1,
      height: 6,
    },
  };

  const blinkerConfig = {
    maxCount: 25,
    maxAnimationLength: 3,
    frequency: 500,
  };

  const blinker = (cells: HTMLElement[]) => {
    const count = Math.ceil(Math.random() * blinkerConfig.maxCount);
    for (let i = 0; i < count; i++) {
      const cell = cells[Math.floor(cells.length * Math.random())];
      cell.style.setProperty(
        "animation",
        `${Math.ceil(Math.random() * blinkerConfig.maxAnimationLength)}s blink`
      );
      cell.addEventListener("animationend", () => {
        cell.style.removeProperty("animation");
      });
    }
    setTimeout(() => {
      blinker(cells);
    }, Math.random() * blinkerConfig.frequency);
  };

  const onResize = () => {
    const mondrian: HTMLElement = document.querySelector(".mondrian")!;

    mondrian.innerHTML = "";
    const mondrianWidth = mondrian.offsetWidth;
    const mondrianHeight = mondrian.offsetHeight;

    // Going to essentially do 1/40th of vmax for determining cell size
    const dynamicCellSize = Math.max(mondrianHeight, mondrianWidth) / 40;
    const dynamicBorderWidth = Math.max(Math.floor(dynamicCellSize / 15), 1);

    // NOTE: keeping these here as reference for early default values
    const borderWidth = dynamicBorderWidth; // 2;
    const baseWidth = dynamicCellSize; // 30; // minimum cell width
    const cellCountWidth = Math.floor(
      mondrianWidth / (baseWidth + borderWidth * 2)
    );

    // TODO: I don't think I need a non-mutable reference to the base width with the new approach. This is redundant
    // TODO: Remove
    let cellWidth = baseWidth;

    // If there's a remainder, distribute it evenly among the cells
    const remainder = mondrianWidth % (baseWidth + borderWidth * 2);
    if (remainder > 0) {
      cellWidth += remainder / cellCountWidth;
    }
    mondrian.style.setProperty("--cell-width", `${String(cellWidth)}px`);
    mondrian.style.setProperty(
      "--cell-count-width",
      `${String(cellCountWidth)}`
    );
    mondrian.style.setProperty("--border-width", `${borderWidth}px`);

    // If the the grid height is not evenly divisble by the cell width, we want to expand the grid height to accomodate the overflow, such that the grid is always filled with cells.
    let cellCountHeight = Math.floor(
      mondrianHeight / (cellWidth + borderWidth * 2)
    );
    const overflow = mondrianHeight % cellWidth;
    // Once we figure out a better solution
    if (overflow > 0) {
      mondrian.style.minHeight = String(
        (mondrianHeight % (cellWidth + borderWidth * 2)) + cellWidth
      );
      mondrian.style.maxHeight = String(
        (mondrianHeight % (cellWidth + borderWidth * 2)) + cellWidth
      );
      mondrian.style.height = String(
        (mondrianHeight % (cellWidth + borderWidth * 2)) + cellWidth
      );
      cellCountHeight += 1;
    }
    mondrian.style.setProperty(
      "--cell-count-height",
      `${String(cellCountHeight)}`
    );

    const links: Array<{
      title: string;
      href: string;
      color: string;
    }> = JSON.parse(mondrian.dataset.projectLinks ?? "[]");

    const totalCellCount = cellCountWidth * cellCountHeight;

    // Build a list of all cells in the grid which we will use later to generate DOM elements.
    // We will use preset percentages to determine the number of each type of cell we want to generate.
    // We will then loop through the list and generate DOM elements for each cell.

    // The most important part of the process is tracking the used cells so that we always have the exact amount of shapes to fit our grid of totalCellCount area.

    let remainingCellCount = totalCellCount;
    const shapes: Array<keyof typeof shapeDimensions> = [];
    while (remainingCellCount > 0) {
      const rand = Math.random();
      const currentRowIndex = Math.floor(
        (totalCellCount - remainingCellCount) / cellCountWidth
      );
      const reverseRowIndex = cellCountHeight - currentRowIndex;
      if (remainingCellCount > 25) {
        if (
          rand < 0.1 &&
          reverseRowIndex > shapeDimensions["small_square"].height - 1
        ) {
          shapes.push("small_square");
          remainingCellCount -= shapeDimensions["small_square"].cellCount;
          continue;
        } else if (
          rand < 0.15 &&
          reverseRowIndex > shapeDimensions["medium_square"].height - 1
        ) {
          shapes.push("medium_square");
          remainingCellCount -= shapeDimensions["medium_square"].cellCount;
          continue;
        } else if (
          rand < 0.165 &&
          reverseRowIndex > shapeDimensions["large_square"].height - 1
        ) {
          shapes.push("large_square");
          remainingCellCount -= shapeDimensions["large_square"].cellCount;
          continue;
        } else if (
          rand < 0.25 &&
          reverseRowIndex > shapeDimensions["small_rect"].height - 1
        ) {
          shapes.push("small_rect");
          remainingCellCount -= shapeDimensions["small_rect"].cellCount;
          continue;
        } else if (
          rand < 0.3 &&
          reverseRowIndex > shapeDimensions["medium_rect"].height - 1
        ) {
          shapes.push("medium_rect");
          remainingCellCount -= shapeDimensions["medium_rect"].cellCount;
          continue;
        } else if (
          rand < 0.35 &&
          reverseRowIndex > shapeDimensions["large_rect"].height - 1
        ) {
          shapes.push("large_rect");
          remainingCellCount -= shapeDimensions["large_rect"].cellCount;
          continue;
        }
      }
      shapes.push("default");
      remainingCellCount -= shapeDimensions["default"].cellCount;
    }

    const template: HTMLTemplateElement = document.querySelector(
      "#mondrian-cell-template"
    )!;

    // Now that we have generated a random distribution of shapes. We want to replace a number of those shapes equal to the number of links, starting from the largest squares. So, we will make a new pass to gather all of our shapes while maintaining references to their position in the original array, letting us replace the origianl shape with a link on the next pass.
    const shapeIndices = shapes.reduce(
      (acc, curr, index) => {
        if (curr === "default") {
          return acc;
        }

        acc[curr].push(index);

        return acc;
      },
      Object.fromEntries(
        Object.keys(shapeDimensions).map(
          (key: string) => [key, []] as [string, number[]]
        )
      )
    );

    // However, in the event that there are more large squares than links, we don't want the distribution of links to be weighted towards the beginning of the page. So, we will also randomize the order of each shape grouping so that we are overwriting shapes with links in random positional order.
    const { large_square, medium_square, small_square } = shapeIndices;
    mutateShuffle(large_square);
    mutateShuffle(medium_square);
    mutateShuffle(small_square);

    const linkIndices = new Map();
    while (links.length) {
      let loc;
      const link = links.pop();
      if (large_square.length) {
        loc = large_square.shift();
      } else if (medium_square.length) {
        loc = medium_square.shift();
      } else {
        loc = small_square.shift();
      }

      linkIndices.set(loc, link);
    }

    for (let i = 0; i < shapes.length; i++) {
      const shape = shapes[i];
      const shapeDimension = shapeDimensions[shape];
      const clonedFragment = template.content.cloneNode(true) as HTMLElement;
      const newCell: HTMLElement =
        clonedFragment.firstElementChild! as HTMLElement;

      let randColor =
        theme.colors[Math.floor(Math.random() * theme.colors.length)];
      randColor =
        Math.random() > 1 - theme.blankPercentage ? theme.baseColor : randColor;

      newCell.style.setProperty("border", `${borderWidth}px solid black`);
      newCell.style.setProperty("--background-color", randColor);
      newCell.classList.add("mondrian-cell");
      newCell.classList.add(shape);
      newCell.style.setProperty("--span-width", String(shapeDimension.width));
      newCell.style.setProperty("--span-height", String(shapeDimension.height));

      if (linkIndices.has(i)) {
        newCell.style.setProperty("position", "relative");
        newCell.classList.add("link");
        // newCell.style.setProperty("border", `${borderWidth}px solid black`);
        const link = linkIndices.get(i);

        newCell.innerHTML = `
          <a href="${link.href}" class="a-link" style="position: absolute; inset: 0;">
            <div style="height: 100%; width: 100%; background-image: url(${link.image}); background-size: cover;"></div>
          </a>
        `;
      }
      mondrian.appendChild(newCell);
    }

    const nonLinkCells: HTMLElement[] = Array.from(
      document.querySelectorAll(".mondrian-cell.default")!
    );
    blinker(nonLinkCells);
  };

  // Note: Because of view transitions, we can't depend on the onLoad function triggering as consistently as the onResize.
  // So, onResize is effectively our main process instead.
  const onLoad = () => {
    onResize();
    window.addEventListener("resize", onResize);
    document.addEventListener("astro:page-load", onResize);
  };

  onLoad();
</script>
