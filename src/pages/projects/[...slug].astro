---
import { getCollection } from "astro:content";
import "../../styles/global.css";
import { themes } from "../../components/MondrianGrid/gridThemes.ts";

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const theme = themes.get("synthwave")!;
let primaryThemeColor =
  theme.colors[Math.floor(Math.random() * theme.colors.length)];
let secondaryThemeColor = theme.colors.filter(
  (color) => color !== primaryThemeColor
)[Math.floor(Math.random() * (theme.colors.length - 1))];

const { project } = Astro.props;
const { Content } = await project.render();
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Bangers&family=Cutive&family=Josefin+Sans:wght@300&display=swap"
      rel="stylesheet"
    />
    <title>Brendan Beltz Projects: {project.data.title}</title>
    <script
      defer
      data-domain="brendanbeltz.com"
      src="https://plausible.sunflowersandsky.com/js/script.js"></script>
  </head>
  <body>
    <header></header>
    <main class="content-grid">
      <div class="splash">
        <img src={project.data.image!} alt="Splash image" />
        <h1>{project.data.title}</h1>
      </div>
      <div class="md-container">
        <Content />
      </div>
    </main>
  </body>
</html>

<!-- Unfortunately, looks like the rendered content is not inserted into the template before the css scoping is applied, so it needs to be global -->
<style is:global define:vars={{ primaryThemeColor, secondaryThemeColor }}>
  :root {
    font-family:
      Josefin Sans,
      -apple-system,
      BlinkMacSystemFont,
      Segoe UI,
      Roboto,
      sans-serif;
  }
  header {
    height: 40px;
    width: 100%;

    background: var(--primaryThemeColor);
  }

  @media screen and (min-width: 500px) {
    header {
      height: 80px;
    }
  }
  .content-grid {
    --padding-inline: 1rem;
    --content-max-width: 900px;
    --breakout-max-width: 1200px;

    --breakout-size: calc(
      (var(--breakout-max-width) - var(--content-max-width)) / 2
    );

    display: grid;
    grid-template-columns:
      [full-width-start] minmax(var(--padding-inline), 1fr)
      [breakout-start] minmax(0, var(--breakout-size))
      [content-start] calc(
        min(100% - (var(--padding-inline) * 2), var(--content-max-width)) / 2
      )
      [halfway]
      calc(
        min(100% - (var(--padding-inline) * 2), var(--content-max-width)) / 2
      )
      [content-end]
      minmax(0, var(--breakout-size)) [breakout-end]
      minmax(var(--padding-inline), 1fr) [full-width-end];

    padding-bottom: 20px;
  }

  .content-grid > :not(.breakout, .full-width),
  .full-width > :not(.breakout, .full-width) {
    grid-column: content;
  }

  .content-grid > .breakout {
    grid-column: breakout;
  }

  .content-grid > .full-width {
    grid-column: full-width;

    display: grid;
    grid-template-columns: inherit;
  }

  .splash {
    grid-column: full-width !important;
    display: grid;
    /* subgrid sucks. didn't work. plus different layouts in FF and chromium */
    grid-template-columns:
      [full-width-start] minmax(var(--padding-inline), 1fr)
      [breakout-start] minmax(0, var(--breakout-size))
      [content-start] calc(
        min(100% - (var(--padding-inline) * 2), var(--content-max-width)) / 2
      )
      [halfway]
      calc(
        min(100% - (var(--padding-inline) * 2), var(--content-max-width)) / 2
      )
      [content-end]
      minmax(0, var(--breakout-size)) [breakout-end]
      minmax(var(--padding-inline), 1fr) [full-width-end];
    container-type: inline-size;
    background: linear-gradient(
      180deg,
      var(--primaryThemeColor) 0%,
      var(--primaryThemeColor) 40%,
      #fff 100%
    );
    padding-bottom: 150px;
  }

  img {
    background: var(--secondaryThemeColor);
    max-width: 100%;
    display: block;
    max-height: 50vh;
    min-height: 300px;
    grid-column: content;
    border: 20px solid var(--secondaryThemeColor);
    border-radius: 10px;
    margin: 0 auto 20px auto;
  }

  h1 {
    font-size: 4rem;
    font-weight: 900;
    font-family: var(--default-font-family);
    color: var(--secondaryThemeColor);
    grid-column: content;
    word-break: break-word;
  }

  h2 {
    font-size: 2rem;
    font-weight: 700;
  }

  ul {
    list-style-type: circle;
    padding-left: 20px;
  }

  .md-container {
    margin-top: -100px;
    z-index: 1;
    line-height: 20px;
  }

  .md-container li {
    margin-bottom: 0.5rem;
  }

  .md-container > * {
    margin-bottom: 2rem;
  }

  @container (min-width: 900px) {
    img {
      grid-column: content-start / halfway;
      margin: initial;
    }

    h1 {
      padding-left: 20px;
      font-size: 4.2rem;
      grid-column: halfway / content-end;
    }
  }

  /* .content-grid > * + * {
    margin-top: var(--flow-spacing, 1em);
  } */
</style>
